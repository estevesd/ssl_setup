#!/usr/bin/env bash

if [ "$(id -u)" != "0" ]; then
  echo "This command must be run as root" 1>&2
  exit 1
fi

DOMAIN="$1"
STRENGTH="$2"
[ -z "$STRENGTH" ] && STRENGTH="modern"
TEMPLATES="/var/lib/ssl_setup"

FQDN=$(awk 'BEGIN {FS=".";OFS="."}{ print $(NF-1), $NF}' <<<$DOMAIN)
DNS_IP=$(dig "@$(dig $FQDN NS +short | head -n 1)" $DOMAIN +short)

if [ -n "$DNS_IP" ]; then
  if ip a | grep $DNS_IP >>/dev/null; then
    echo "SUCCESS: $DOMAIN points to this machine."
  else
    echo "ERROR: There's a DNS record for $DOMAIN but it doesn't point to this machine."
    exit 1
  fi
else
  echo "ERROR: There's no DNS record for $DOMAIN."
  echo "First add a DNS record for $DOMAIN"
  exit 1
fi
DNS_WWW_IP=$(dig www.$DOMAIN +short)
SET_WWW=
if [ -n "$DNS_WWW_IP" ]; then
  if ip a | grep $DNS_WWW_IP >>/dev/null; then
    echo "SUCCESS: www.$DOMAIN points to this machine."
    SET_WWW=YES
  else
    echo "WARNING: There's a DNS record for www.$DOMAIN but it doesn't point to this machine."
    SET_WWW=NO
  fi
else
  echo "WARNING: There's no DNS record for www.$DOMAIN."
  SET_WWW=NO
fi

# Create root directory and nginx configuration if this domain is not already set in nginx
if ! cat /etc/nginx/nginx.conf /etc/nginx/conf.d/* /etc/nginx/sites-{available,enabled}/* | grep "server_name .*ssltst.wicastr.us.*;"; then
  ROOT_PATH="/var/www/$DOMAIN"
  [ -d "$ROOT_PATH" ] || mkdir -p "$ROOT_PATH"
  [ -f "$ROOT_PATH/index.html" ] || echo "$DOMAIN says : Hello World!" >"$ROOT_PATH/index.html"
  rm -f /etc/nginx/sites-{available,enabled}/$DOMAIN /etc/nginx/sites-{available,enabled}/www.$DOMAIN
  if [ "$SET_WWW" == "YES" ]; then
    cat /var/lib/ssl_setup/nginx_www.template >/etc/nginx/sites-available/www.$DOMAIN
    sed -i -e "s/{{DOMAIN}}/$DOMAIN/" /etc/nginx/sites-available/www.$DOMAIN
    sudo ln -s /etc/nginx/sites-available/www.$DOMAIN /etc/nginx/sites-enabled/www.$DOMAIN
    DOMAINS="--domains $DOMAIN,www.$DOMAIN"
  else
    DOMAINS="--domain $DOMAIN"
  fi
  cat /var/lib/ssl_setup/nginx.template >/etc/nginx/sites-available/$DOMAIN
  sed -i -e "s/{{DOMAIN}}/$DOMAIN/" -e "s|{{ROOT_PATH}}|$ROOT_PATH|" /etc/nginx/sites-available/$DOMAIN
  sudo ln -s /etc/nginx/sites-available/$DOMAIN /etc/nginx/sites-enabled/$DOMAIN
fi

# Generate certificates
letsencrypt -n --nginx $DOMAINS
# Enhance security
letsencrypt enhance $DOMAINS --cert-name $DOMAIN --hsts --redirect --non-interactive --must-staple --staple-ocsp --nginx

NGINX_VERSION=$(nginx -v 2>&1 | awk -F'[ /]' '{print $4}')
while read MATCH; do
  [ -z "$MATCH" ] && continue
  LINE=$(awk 'BEGIN{FS=":"} {print $NF}' <<<"$MATCH")
  FILE=$(awk 'BEGIN{FS=":";OFS=":"} {$NF="";print $0}' <<<"$MATCH" | sed "s/:$//")
  # replace each occurence of : include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
  # with : include /etc/letsencrypt/live/$DOMAIN/nginx.conf; # managed by Certbot
  # bit only when associated to : ssl_certificate_key /etc/letsencrypt/live/$DOMAIN/privkey.pem; # managed by Certbot
  sed -i -e "$((LINE + 1))s|\(include /etc/letsencrypt/\)options-ssl-\(nginx.conf\)|\1live/${DOMAIN}/nginx.conf|" $FILE

  # replace : ssl_dhparam .*; # managed by Certbot
  sed -e "$((LINE + 2))s|\(ssl_dhparam \).*;|\1live/${DOMAIN}/dhparam.pem;|"

  if [ "1.9.5" = "$(echo -e "1.9.5\n$NGINX_VERSION" | sort -V | head -n1)" ]; then
    # Add http2 on listen lines associated to : ssl_certificate_key /etc/letsencrypt/live/$DOMAIN/privkey.pem; # managed by Certbot
    sed -i -e "$((LINE - 2))s/443 ssl \?\([i;]\)/443 ssl http2 \1/" $FILE
    sed -i -e "$((LINE - 3))s/443 ssl \?\([i;]\)/443 ssl http2 \1/" $FILE
  fi

done <<<"$(grep -Hnos /$DOMAIN/privkey.pem /etc/nginx/{conf.d,sites-available}/* | awk 'BEGIN {FS=":";OFS=":"} NF{NF--};1')"
cp $TEMPLATES/ciphers/$STRENGTH /etc/letsencrypt/live/${DOMAIN}/nginx.conf

systemctl restart nginx

dig caa "$DOMAIN" | grep letsencrypt.org >>/dev/null || echo "WARNING : Add CAA record on your DNS server"

echo "Go to https://www.ssllabs.com/ssltest/analyze.html?d=$DOMAIN&latest=yes to check rating"
